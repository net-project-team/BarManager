@page "/productcart"
@using Manager.Application.Handlers;
@using Manager.Infrastructure.Repositories.Models;
@using Manager.Application.Handler.Interfaces;
@using Manager.Application.Repository.Interfaces;
@using Manager.Domain.Models;
@inject IJSRuntime JSRuntime;

<div class="row">

    
    <button class="btn btn-success" @onclick="@(() => addNewOrder())">New Order</button>
    @if (showCategories)
    {
         <div style = "width:200px; height:auto;border:1px solid red;" class="col-sm-5">
            @foreach (Category category in categories)
            {
                <div style="width:150px" class="row"><button class="btn btn-secondary btn-sm"  onclick="@(() => ChoosedCategory(category))">@category.CategoryName</button></div>

            }

            </div>
    }
    @if (products != null)
    {
        <div style="border:1px solid green;" class="col">
            <div class="flextest">

                @foreach (Product product in products)
                {

                    <div> <button style="width:100px;height:100px" class="btn btn-success" onclick="@(() => ChoosedProduct(product))">@product.ProductName</button></div>

                }

            </div>
            

            
           
        </div>


    }
    <div style="width:400px;height:600px;border:1px solid red; overflow-y: auto;">
        @if (choosedProducts != null)
        {
            @foreach (Product product in choosedProducts)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <td>@product.ProductName</td>
                            <td> <button class="btn btn-danger" onclick="@(() =>RemoveFirstProduct(product))">Remove</button></td>
                        </tr>
                    </thead>

                </table>

            }

        }
               

    </div>
    <div style="float:inline-end"><h2>TotalSum:@TotalSum</h2></div>
    <button class="btn btn-danger" @onclick="(()=>CheckoutBtn())">Checkout</button>
</div>



@code {
    List<OrderProduct> orderProductList = new List<OrderProduct>();
    bool showCategories = false;


    int insertedOrderId = 0;
    public async void addNewOrder()
    {
        showCategories = true;
        Order order = new Order();
        order.OrderTable = 1;
        insertedOrderId = await new OrdersRepo().InsertOrderReturnId(order);


    }

    List<Category> categories = new List<Category>();

    List<Product> choosedProducts = new List<Product>();
    protected override async Task OnInitializedAsync()
    {
        ICategoryRepository categoryRepository = new CategoryRepo();
        ICategoryHandler categoryhandler = new CategoryHandler(categoryRepository);

        categories = await categoryhandler.GetAllCategoriesAsync();

    }
    List<Product> products;
    decimal TotalSum = 0;
    public async  void ChoosedCategory(Category category)
    {
        IProductRepository productRepository = new ProductsRepo();
        IProductHandler productHandler = new ProductsHandler(productRepository);
        products =await  productHandler.GetAllProductsAsync();

        StateHasChanged();

    }

    void RemoveFirstProduct(Product product)
    {
        if (choosedProducts.Count > 0)
        {
            OrderProduct forRemove = new OrderProduct()
            {
                Product = product
            };
            choosedProducts.Remove(product);

            orderProductList.Remove(orderProductList.Find(x => x.Product == product));

            TotalSum -= product.ProductPrice;
        }
        StateHasChanged();
    }




    public void ChoosedProduct(Product product)
    {
        choosedProducts.Add(product);
        TotalSum += product.ProductPrice;
        Order choosedOrder = new()
            {
                OrderId = insertedOrderId,
                OrderTable = 1
            };

        orderProductList.Add(new OrderProduct()
            {
                Order = choosedOrder,
                Product = product

        });


        StateHasChanged();
    }


    public async void CheckoutBtn()
    {
        await new OrderProductsRepo().InsertRangeAsync(orderProductList);
        orderProductList = new List<OrderProduct>();
        insertedOrderId = 0;
        choosedProducts = new List<Product>();
        products = null;
        showCategories = false;
        TotalSum = 0;
        StateHasChanged();
    }
}
